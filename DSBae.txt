Projeto pratico 2

Restaurante com 2 mesas

Entidades:
	Grupo (n pessoas)	(Group)
	Recepcionista	(Recepcionist)
	Empregado	(Waiter)
	Cozinheiro	(Chef)

Um grupo ao chegar dirige se ao recepcionista
Quando o recepcionista permitir, este dirige se a mesa
Quando chega a mesa, pede a comida ao empregado
O empregado leva o pedido ao chefe
O chefe cozinha
O chefe entrega a comida ao waiter
O waiter entrega a comida ao grupo
O grupo come
O grupo pede a conta ao recepcionista (?)
O Recepcionista da o checkout ao Grupo

O chef so faz refeicao para 1 grupo de cada vez

Aceder a regiao critica, semDown(semgid, sh->mutex)
Alterar o estado sh->fSt.st.chefStat = COOK;
saveState(nFic,&sh->fSt);


Group			Recepcionista 			Waiter 			Chef
------------------->(arrive)
  	(give table)
  <----------------
  				(FoodRequest)
  --------------------------------------->
  									    	(Inform Chef)
  									       ------------->
  									       				Cook
  									       	(Food Ready)			
  									       <--------------
  				(TakeFood)
  <----------------------------------------
Eat
	(BillRequest)
  ------------------->
  	(Checkout)
  <------------------


Em caso de deadlock iusamos um IPCS para ver as nossas chaves
Alteramos o clean.sh para correspodner as nossas chaves

Change config para alterar o numero de grupos de teste

Cada entidade so pode alterar o seu proprio estado MAS todos tem acesso aos estados uns dos outros pois isto vai correr em memoria partilhada

Doxygen - gera documentacao atravez de um codigo (OMG WHAT)


Running it:
	cd src
	make all_bin
	cd ../run
	./probSemSharedMemRestaurante

Ver documentaÃ§ao
	cd ../doc
	Doxygen
	firefox html/index.html

Se quisermos fazer nosso chefe com outras entidades
	cd ../src
	make ch

Limpar se der deadlock
	cd ../run
	./probSemSharedMemRestaurante
	./clean.sh

Modificar SemSharedMem"entidades".c
probDataStruct.h
probConst.h
sharedDataSync.h


Semaforos:
	Mutex - comum a todos para entrar regiao critica
	Chef-
		waiterRequestPossible
		waitOrder

	Waiter-
		waiterRequest
		orderReceived

	Receptionist-
		receptionistReq

	Groups-
		receptionistRequestPossible
		waiterRequestPossible
		waitForTable[MAXGROUPS]
		requestReceived[NUMTABLES]
		foodArrived[NUMTABLES]
		tableDone[NUMTABLES]


Estados:
	Chef-
		WAIT_FOR_ORDER
		COOK
		REST

	Waiter-
		WAIT_FOR_REQUEST
		INFORM_CHEF
		TAKE_TO_TABLE

	Receptionist-
		ASSIGN_TABLE
		RECVPAY

	Groups-
		GOTOREST
		ATRECEPTION
		FOOD_REQUEST
		WAIT_FOR_FOOD
		EAT
		CHECKOUT
		LEAVING





















